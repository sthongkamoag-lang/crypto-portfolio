import React, { useMemo } from 'react';
import './StatisticData.css';

function StatisticData({ trades }) {
  const statistics = useMemo(() => {
    if (trades.length === 0) {
      return null;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const closedTrades = trades.filter(t => t.status === 'CLOSED' && t.profitLoss !== 0);
    const winningTrades = closedTrades.filter(t => t.profitLoss > 0);
    const losingTrades = closedTrades.filter(t => t.profitLoss < 0);

    const totalProfit = winningTrades.reduce((sum, t) => sum + t.profitLoss, 0);
    const totalLoss = Math.abs(losingTrades.reduce((sum, t) => sum + t.profitLoss, 0));
    const averageWin = winningTrades.length > 0 ? totalProfit / winningTrades.length : 0;
    const averageLoss = losingTrades.length > 0 ? totalLoss / losingTrades.length : 0;
    const profitFactor = totalLoss > 0 ? totalProfit / totalLoss : 0;

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î
    const pairStats = {};
    trades.forEach(trade => {
      if (trade.pair && trade.pair !== '-') {
        if (!pairStats[trade.pair]) {
          pairStats[trade.pair] = {
            pair: trade.pair,
            totalTrades: 0,
            wins: 0,
            losses: 0,
            totalProfit: 0,
            openPositions: 0
          };
        }
        pairStats[trade.pair].totalTrades++;
        if (trade.profitLoss > 0) {
          pairStats[trade.pair].wins++;
          pairStats[trade.pair].totalProfit += trade.profitLoss;
        } else if (trade.profitLoss < 0) {
          pairStats[trade.pair].losses++;
          pairStats[trade.pair].totalProfit += trade.profitLoss;
        }
        if (trade.status === 'OPEN') {
          pairStats[trade.pair].openPositions++;
        }
      }
    });

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    const monthlyStats = {};
    trades.forEach(trade => {
      if (trade.date) {
        const month = trade.date.substring(0, 7); // YYYY-MM
        if (!monthlyStats[month]) {
          monthlyStats[month] = {
            month: month,
            trades: 0,
            profit: 0,
            deposits: 0,
            withdraws: 0
          };
        }
        monthlyStats[month].trades++;
        monthlyStats[month].profit += trade.profitLoss;
        if (trade.type === 'DEPOSIT') {
          monthlyStats[month].deposits += trade.totalValue;
        } else if (trade.type === 'WITHDRAW') {
          monthlyStats[month].withdraws += trade.totalValue;
        }
      }
    });

    return {
      closedTrades: closedTrades.length,
      winningTrades: winningTrades.length,
      losingTrades: losingTrades.length,
      winRate: closedTrades.length > 0 ? (winningTrades.length / closedTrades.length) * 100 : 0,
      totalProfit,
      totalLoss,
      averageWin,
      averageLoss,
      profitFactor,
      pairStats: Object.values(pairStats).sort((a, b) => b.totalProfit - a.totalProfit),
      monthlyStats: Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month))
    };
  }, [trades]);

  if (!statistics) {
    return (
      <div className="statistic-data">
        <h2>üìä Statistic Data</h2>
        <div className="empty-state">
          <div className="empty-icon">üìâ</div>
          <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</h3>
          <p>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</p>
        </div>
      </div>
    );
  }

  return (
    <div className="statistic-data">
      <h2>üìä Statistic Data (‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)</h2>

      <div className="stats-overview">
        <div className="overview-card">
          <h3>üìà Trading Performance</h3>
          <div className="performance-grid">
            <div className="perf-item">
              <span className="perf-label">‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß:</span>
              <span className="perf-value">{statistics.closedTrades}</span>
            </div>
            <div className="perf-item">
              <span className="perf-label">‡∏ä‡∏ô‡∏∞:</span>
              <span className="perf-value win">{statistics.winningTrades}</span>
            </div>
            <div className="perf-item">
              <span className="perf-label">‡πÅ‡∏û‡πâ:</span>
              <span className="perf-value lose">{statistics.losingTrades}</span>
            </div>
            <div className="perf-item">
              <span className="perf-label">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞:</span>
              <span className="perf-value">{statistics.winRate.toFixed(2)}%</span>
            </div>
          </div>
        </div>

        <div className="overview-card">
          <h3>üí∞ Profit & Loss Analysis</h3>
          <div className="performance-grid">
            <div className="perf-item">
              <span className="perf-label">‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°:</span>
              <span className="perf-value win">
                ‡∏ø{statistics.totalProfit.toLocaleString(undefined, {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                })}
              </span>
            </div>
            <div className="perf-item">
              <span className="perf-label">‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°:</span>
              <span className="perf-value lose">
                ‡∏ø{statistics.totalLoss.toLocaleString(undefined, {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                })}
              </span>
            </div>
            <div className="perf-item">
              <span className="perf-label">‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏Ñ‡∏£‡∏±‡πâ‡∏á:</span>
              <span className="perf-value">
                ‡∏ø{statistics.averageWin.toLocaleString(undefined, {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                })}
              </span>
            </div>
            <div className="perf-item">
              <span className="perf-label">‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏Ñ‡∏£‡∏±‡πâ‡∏á:</span>
              <span className="perf-value">
                ‡∏ø{statistics.averageLoss.toLocaleString(undefined, {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                })}
              </span>
            </div>
            <div className="perf-item">
              <span className="perf-label">Profit Factor:</span>
              <span className={`perf-value ${statistics.profitFactor > 1 ? 'win' : 'lose'}`}>
                {statistics.profitFactor.toFixed(2)}
              </span>
            </div>
          </div>
        </div>
      </div>

      <div className="stats-tables">
        <div className="table-card">
          <h3>üéØ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î</h3>
          <div className="table-scroll">
            <table>
              <thead>
                <tr>
                  <th>‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î</th>
                  <th>‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</th>
                  <th>‡∏ä‡∏ô‡∏∞</th>
                  <th>‡πÅ‡∏û‡πâ</th>
                  <th>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</th>
                  <th>Open Positions</th>
                </tr>
              </thead>
              <tbody>
                {statistics.pairStats.length > 0 ? (
                  statistics.pairStats.map((pair, index) => {
                    const winRate = pair.wins + pair.losses > 0 
                      ? (pair.wins / (pair.wins + pair.losses)) * 100 
                      : 0;
                    
                    return (
                      <tr key={index}>
                        <td><strong>{pair.pair}</strong></td>
                        <td>{pair.totalTrades}</td>
                        <td className="win">{pair.wins}</td>
                        <td className="lose">{pair.losses}</td>
                        <td>{winRate.toFixed(1)}%</td>
                        <td className={pair.totalProfit >= 0 ? 'win' : 'lose'}>
                          {pair.totalProfit >= 0 ? '+' : ''}
                          ‡∏ø{pair.totalProfit.toLocaleString(undefined, {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })}
                        </td>
                        <td>
                          {pair.openPositions > 0 && (
                            <span className="badge badge-orange">
                              {pair.openPositions}
                            </span>
                          )}
                          {pair.openPositions === 0 && '-'}
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="7" style={{textAlign: 'center', padding: '20px'}}>
                      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        <div className="table-card">
          <h3>üìÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
          <div className="table-scroll">
            <table>
              <thead>
                <tr>
                  <th>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</th>
                  <th>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</th>
                  <th>‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å</th>
                  <th>‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏≠‡∏ô</th>
                  <th>Net Flow</th>
                </tr>
              </thead>
              <tbody>
                {statistics.monthlyStats.length > 0 ? (
                  statistics.monthlyStats.map((month, index) => {
                    const netFlow = month.deposits - month.withdraws;
                    
                    return (
                      <tr key={index}>
                        <td><strong>{month.month}</strong></td>
                        <td>{month.trades}</td>
                        <td className={month.profit >= 0 ? 'win' : 'lose'}>
                          {month.profit >= 0 ? '+' : ''}
                          ‡∏ø{month.profit.toLocaleString(undefined, {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })}
                        </td>
                        <td className="win">
                          {month.deposits > 0 ? (
                            `+‡∏ø${month.deposits.toLocaleString(undefined, {
                              minimumFractionDigits: 2,
                              maximumFractionDigits: 2
                            })}`
                          ) : '-'}
                        </td>
                        <td className="lose">
                          {month.withdraws > 0 ? (
                            `-‡∏ø${month.withdraws.toLocaleString(undefined, {
                              minimumFractionDigits: 2,
                              maximumFractionDigits: 2
                            })}`
                          ) : '-'}
                        </td>
                        <td className={netFlow >= 0 ? 'win' : 'lose'}>
                          {netFlow >= 0 ? '+' : ''}
                          ‡∏ø{netFlow.toLocaleString(undefined, {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })}
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="6" style={{textAlign: 'center', padding: '20px'}}>
                      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div className="insights-section">
        <h3>üí° Insights & Recommendations</h3>
        <div className="insights-grid">
          {statistics.profitFactor > 2 && (
            <div className="insight-card success">
              <div className="insight-icon">üéâ</div>
              <div className="insight-content">
                <h4>‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!</h4>
                <p>Profit Factor ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {statistics.profitFactor.toFixed(2)} ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</p>
              </div>
            </div>
          )}

          {statistics.winRate > 60 && (
            <div className="insight-card success">
              <div className="insight-icon">üèÜ</div>
              <div className="insight-content">
                <h4>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏™‡∏π‡∏á</h4>
                <p>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {statistics.winRate.toFixed(1)}% ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ!</p>
              </div>
            </div>
          )}

          {statistics.winRate < 40 && statistics.closedTrades > 10 && (
            <div className="insight-card warning">
              <div className="insight-icon">‚ö†Ô∏è</div>
              <div className="insight-content">
                <h4>‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</h4>
                <p>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {statistics.winRate.toFixed(1)}% ‡∏•‡∏≠‡∏á‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
              </div>
            </div>
          )}

          {statistics.averageLoss > statistics.averageWin && statistics.closedTrades > 5 && (
            <div className="insight-card warning">
              <div className="insight-icon">üìä</div>
              <div className="insight-content">
                <h4>Risk/Reward ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</h4>
                <p>‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á Stop Loss ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Take Profit</p>
              </div>
            </div>
          )}

          {statistics.closedTrades < 5 && (
            <div className="insight-card info">
              <div className="insight-icon">üìà</div>
              <div className="insight-content">
                <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</h4>
                <p>‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20-30 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default StatisticData;